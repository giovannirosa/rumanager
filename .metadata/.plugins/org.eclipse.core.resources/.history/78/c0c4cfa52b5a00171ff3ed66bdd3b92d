package view.utils;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.geometry.Rectangle2D;
import javafx.scene.Node;
import javafx.scene.control.Alert;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Region;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonBar;
import view.Main;

public class Factory {
	
	public static Rectangle2D screen = javafx.stage.Screen.getPrimary().getVisualBounds();
	
	public static final String RU_PATH = System.getProperty("user.home")+"\\.rumanager";

	public static String getImagePath(String img) {
		return Main.class.getResource("/"+img).toExternalForm();
	}
	
	public static Image getButIcon(String img) {
		return new Image(Factory.getImagePath(img),20,20,true,true);
	}
	
	public static Image getButIcon(String img, int size) {
		return new Image(Factory.getImagePath(img),size,size,true,true);
	}
	
	public static void setMaxWidth(int maxWidth, Region... nodes) {
		for (Region e : nodes) {
			e.setMaxWidth(maxWidth);
		}
	}

	public static HBox makeInnerPane(int spacing, Label label, Node component) {
		HBox box = new HBox(spacing);
		box.setAlignment(Pos.CENTER);
		box.getChildren().addAll(label,component);
		return box;
	}
	
	public static HBox makeInnerPane(int spacing, Node... node) {
		HBox box = new HBox(spacing);
		box.setAlignment(Pos.CENTER);
		for(Node e : node) {
			box.getChildren().add(e);
		}
		return box;
	}
	
	public static VBox makeVerticalPane(int spacing, Node... node) {
		VBox box = new VBox(spacing);
		box.setAlignment(Pos.CENTER);
		for(Node e : node) {
			box.getChildren().add(e);
		}
		return box;
	}
	
	public static GridPane makeGridPane(int spacing, Node... node) {
		GridPane grid = new GridPane();
		grid.setAlignment(Pos.CENTER);
		grid.setPadding(new Insets(spacing));
		grid.setVgap(spacing);
		grid.setHgap(spacing);
		int i = 0, j = 0;
		for(Node e : node) {
			grid.add(e, i, j);
			if (i == 1) {
				j++;
				i = 0;
			} else {
				i++;
			}
		}
		return grid;
	}
	
	public static void log(String log) {
		File theDir = new File(Factory.RU_PATH);
		// if the directory does not exist, create it
		if (!theDir.exists()) {
		    System.out.println("creating directory: " + theDir.getName());
		    try {
		        theDir.mkdir();
		    } 
		    catch(SecurityException se){
		        se.printStackTrace();
		    }        
		}
		
		File file = new File (Factory.RU_PATH+"\\log.txt");
		FileWriter fw = null;
		try {
			if (file.exists())
			   fw = new FileWriter(file,true);//if file exists append to file. Works fine.
			else {
			   file.createNewFile();
			   fw = new FileWriter(file);
			}
		} catch (IOException ex) {
		    ex.printStackTrace();
		}
		try(    BufferedWriter bw = new BufferedWriter(fw);
			    PrintWriter out = new PrintWriter(bw))
			{
			    out.println(log);
			} catch (IOException e) {
			    e.printStackTrace();
			}
		try {
			if (fw != null)
				fw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		System.out.println(log);
	}

	public static void showWarning(String message) {
		Alert alert = new Alert(AlertType.WARNING, message);
		configDialog(alert);

		Button b = (Button) ((ButtonBar)alert.getDialogPane().getChildren().get(2)).getButtons().get(0);
		ImageView iv = new ImageView(getButIcon("check.png"));
		b.setGraphic(iv);
		b.setMinWidth(200);

		alert.showAndWait();
	}
	
	public static boolean showConfirmation(String message) {
		Alert alert = new Alert(AlertType.CONFIRMATION, message, ButtonType.YES, ButtonType.NO);
		configDialog(alert);

		Button b1 = (Button) ((ButtonBar)alert.getDialogPane().getChildren().get(2)).getButtons().get(0);
		Button b2 = (Button) ((ButtonBar)alert.getDialogPane().getChildren().get(2)).getButtons().get(1);
		ImageView iv1 = new ImageView(getButIcon("check.png"));
		ImageView iv2 = new ImageView(getButIcon("exit.png"));
		b1.setGraphic(iv1);
		b2.setGraphic(iv2);
		b2.setPrefWidth(90);
		
		return alert.showAndWait().get() == ButtonType.YES;
	}
	
	private static void configDialog(Alert alert) {
		alert.getDialogPane().setId("dialog");
		alert.setHeaderText(null);
		alert.setGraphic(new ImageView(new Image(Factory.getImagePath("warning.png"),50,50,true,true)));
		Stage stage = (Stage) alert.getDialogPane().getScene().getWindow();
		stage.setMinWidth(500);
		stage.getIcons().add(getButIcon("message.png"));
		Label label = (Label) alert.getDialogPane().getChildren().get(1);
		label.setMinHeight(100);
		
		ButtonBar l = (ButtonBar) alert.getDialogPane().getChildren().get(2);
		l.setMinHeight(60);
		Button b = (Button) l.getButtons().get(0);
		b.setPrefWidth(90);
		
//		alert.getDialogPane().getStylesheets().add(Inicial.class.getResource("Style.css").toExternalForm());
	}
}

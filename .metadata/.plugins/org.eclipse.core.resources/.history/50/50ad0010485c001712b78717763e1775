package view.pane;

import java.text.DecimalFormat;

import javafx.scene.control.Button;
import javafx.scene.control.ButtonBar.ButtonData;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Dialog;
import javafx.scene.control.Label;
import javafx.scene.control.Spinner;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import model.Ing;
import model.Item;
import model.Rec;
import model.table.TRecModel;
import model.table.TableModel;
import view.Main;
import view.table.RecTable;
import view.table.Table;
import view.tabs.AbstractTab;
import view.utils.Factory;
import view.utils.UtilPane;

public class RefPane extends UtilPane {
	
	Label recLabel = new Label("Receitas:");
	Label noLabel = new Label("Número de Refeições:");
	Label custoLabel = new Label("Custo Total:");
	Label calorLabel = new Label("Calorias Totais:");
	
	RecTable recTable = new RecTable();
	Spinner<Integer> noSpin = new Spinner<>();
	TextField custoField = new TextField();
	TextField calorField = new TextField();
	
	Button recBut = new Button("Visualizar Receitas");
	
	Dialog<String> recDialog = new Dialog<>();
	Dialog<ButtonType> refDialog = new Dialog<>();
	
	TextArea prevArea = new TextArea();

	public RefPane(Table<TableModel> table, AbstractTab tab) {
		super(table, tab);
		
		double custo = 0;
		int calor = 0;
		for (TableModel m : table.getItems()) {
			TRecModel r = (TRecModel) m;
			Rec rModel = (Rec) Main.recControl.get(m.getDesc());
			if (r.getSel().equals("X")) {
				recTable.getItems().add(m);
				for (Ing i : rModel.getListaIngrediente()) {
					Item item = (Item) Main.itemControl.get(i.getId());
					custo += item.getPreco()*i.getQtde();
				}
				calor += rModel.getValorCalorico();
			}
		}
		
		custoField.setDisable(true);
		custoField.setText(new DecimalFormat("##.00").format(custo));
		calorField.setDisable(true);
		calorField.setText(Integer.toString(calor));
		
		Factory.configSpin(noSpin, 1, 100000, 1, 1);
		
		Factory.configDialog(recDialog,recTable);
		recTable.setPrefWidth(1000);
		recTable.getColumns().remove(4);
		recBut.setOnAction(e -> {
			recDialog.showAndWait();
		});
		
		Factory.configFinalDialog(refDialog,prevArea);
		confirmBut.setText("Gerar Refeição");
		confirmBut.setOnAction(e -> {
			if (Factory.showConfirmation("Tem certeza que deseja gerar a refeição?\n"
					+ "O estoque será debitado e o texto será gerado!"))
			mountRef();
			if (refDialog.showAndWait().get().getButtonData() == ButtonData.OK_DONE) {
				Factory.saveFile(prevArea.getText());
			}
		});
		
		inputPane.add(recLabel, 0, 0);
		inputPane.add(recBut, 1, 0);
		inputPane.add(noLabel, 0, 1);
		inputPane.add(noSpin, 1, 1);
		inputPane.add(custoLabel, 0, 2);
		inputPane.add(custoField, 1, 2);
		inputPane.add(calorLabel, 0, 3);
		inputPane.add(calorField, 1, 3);
	}
	
	private void checkStorage() {
		
	}
	
	private void mountRef() {
		StringBuilder text = new StringBuilder();
		text.append("RU Manager | UFPR | BCC\n\n");
		text.append("Número de Refeições: "+noSpin.getValue()+"\n");
		text.append("Custo Total: R$ "+custoField.getText()+"\n");
		text.append("Calorias Totais: "+calorField.getText()+"\n\n");
		text.append("Receitas utilizadas:\n\n");
		for (TableModel m : table.getItems()) {
			Rec rModel = (Rec) Main.recControl.get(m.getDesc());
			text.append(rModel.mountRec());
			if (!(table.getItems().indexOf(m) == table.getItems().size()-1))
				text.append("\n\n--------------------------------------------------------\n\n");
		}
		
		prevArea.setText(text.toString());
	}

	@Override
	public void addMode() {}

	@Override
	public void editMode(TableModel model) {}

	@Override
	public void clear() {}

}
